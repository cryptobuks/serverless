service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    # - Effect: Allow
      # Action:
      #   - dynamodb:Query
      # Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"

functions:
  create:
    handler: code/create.create
    events:
      - http:
          path: code
          method: post
          cors: true


  get:
    handler: code/get.get
    events:
      - http:
          path: code/{id}
          method: get
          cors: true
  cron:
    handler: code/cron.run
    events:
      - schedule: rate(1 minute)
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
         - AttributeName: id
           AttributeType: S
         # - AttributeName: timePutIn
         #   AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          # - AttributeName: timePutIn
          #   KeyType: RANGE
        # GlobalSecondaryIndexes:
        #  - IndexName: mainGSI
        #    Projection:
        #      ProjectionType: KEYS_ONLY
        #    ProvisionedThroughput:
        #     ReadCapacityUnits: '1'
        #     WriteCapacityUnits: '1'
        #    KeySchema:
        #    - AttributeName: timePutIn
        #      KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
